{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"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","sourcesContent":["import { WebPlugin } from '@capacitor/core';\r\n\r\nimport type { FullMediaItem, GalleryPlusPlugin, GetMediaListOptions, GetMediaOptions, MediaItem } from './definitions';\r\n\r\n\r\n\r\nexport class GalleryPlusWeb extends WebPlugin implements GalleryPlusPlugin {\r\n    async checkPermissions(): Promise<{ status: string }> {\r\n        console.warn('checkPermissions is not required on web.');\r\n        return { status: 'granted' };\r\n    }\r\n\r\n    async requestPermissions(): Promise<{ status: string }> {\r\n        console.warn('requestPermissions is not required on web.');\r\n        return { status: 'granted' };\r\n    }\r\n\r\n    private _mediaList = new Map();\r\n \r\n    async getMediaList(\r\n        options: GetMediaListOptions = {}\r\n    ): Promise<{ media: MediaItem[] }> {\r\n        return new Promise((resolve, reject) => {\r\n            const input = document.createElement('input');\r\n            input.type = 'file';\r\n            input.setAttribute('webkitdirectory', '');\r\n            input.setAttribute('multiple', '');\r\n            input.style.display = 'none';\r\n    \r\n            input.addEventListener('change', async (event: Event) => {\r\n                const target = event.target as HTMLInputElement;\r\n                if (!target.files) {\r\n                    reject(new Error('No files selected'));\r\n                    return;\r\n                }\r\n    \r\n                try {\r\n                    this._mediaList = new Map();\r\n                    const mediaArray: MediaItem[] = [];\r\n    \r\n                    for (const file of (target as any).files) {\r\n                        if (file.type.startsWith('image/') || file.type.startsWith('video/')) {\r\n                            const path: string = URL.createObjectURL(file);\r\n                            const mediaItem: MediaItem = {\r\n                                id: file.name,\r\n                                name: file.name,\r\n                                type: file.type.startsWith('image/') ? 'image' : 'video',\r\n                                createdAt: file.lastModified,\r\n                                fileSize: file.size,\r\n                                mimeType: file.type,\r\n                                thumbnail: await this.generateImageThumbnailFast(file, 200, 0.8)\r\n                            };\r\n    \r\n                            this._mediaList.set(file.name, {...mediaItem, path, file});\r\n    \r\n                            if (file.type.startsWith('image/')) {\r\n                                if (options.includeDetails) {\r\n                                    await this.getImageDimensions(path).then((dimensions) => {\r\n                                        mediaItem.width = dimensions.width;\r\n                                        mediaItem.height = dimensions.height;\r\n                                    });\r\n                                }\r\n    \r\n                                if (options.includeBaseColor) {\r\n                                    await this.getDominantColor(path).then((baseColor) => {\r\n                                        mediaItem.baseColor = baseColor;\r\n                                    });\r\n                                }\r\n                            } else if (file.type.startsWith('video/')) {\r\n                                if (options.includeDetails) {\r\n                                    await this.getVideoDimensions(path).then((dimensions) => {\r\n                                        mediaItem.width = dimensions.width;\r\n                                        mediaItem.height = dimensions.height;\r\n                                    });\r\n                                }\r\n                            }\r\n    \r\n                            mediaArray.push(mediaItem);\r\n                        }\r\n                    }\r\n    \r\n                    mediaArray.sort((a, b) =>\r\n                        options.sort === 'oldest'\r\n                            ? Number(a.createdAt) - Number(b.createdAt)\r\n                            : Number(b.createdAt) - Number(a.createdAt)\r\n                    );\r\n    \r\n                    console.log('list', this._mediaList);\r\n                    resolve({ media: mediaArray });\r\n                } catch (err) {\r\n                    console.error('Error processing files:', err);\r\n                    reject(err);\r\n                }\r\n            });\r\n    \r\n            document.body.appendChild(input);\r\n            input.click();\r\n            document.body.removeChild(input);\r\n        });\r\n    }\r\n    \r\n    async getMedia(\r\n        options: GetMediaOptions\r\n    ): Promise<FullMediaItem> {\r\n        try {\r\n            const mediaItem = this._mediaList.get(options.id) as FullMediaItem & {file?: File};\r\n\r\n            if (mediaItem.type === 'image') {\r\n                if (options.includeDetails && mediaItem.path) {\r\n                    await this.getImageDimensions(mediaItem.path).then(\r\n                        (dimensions) => {\r\n                            mediaItem.width = dimensions.width;\r\n                            mediaItem.height = dimensions.height;\r\n                        }\r\n                    );\r\n                }\r\n\r\n                if (options.includeBaseColor && mediaItem.path) {\r\n                    await this.getDominantColor(mediaItem.path).then(\r\n                        (baseColor) => {\r\n                            mediaItem.baseColor = baseColor;\r\n                        }\r\n                    );\r\n                }\r\n\r\n            } else if (mediaItem.type === 'video') {\r\n\r\n                if (options.includeDetails && mediaItem.path) {\r\n                    await this.getVideoDimensions(mediaItem.path).then(\r\n                        (dimensions) => {\r\n                            mediaItem.width = dimensions.width;\r\n                            mediaItem.height = dimensions.height;\r\n                        }\r\n                    );\r\n                }\r\n            }\r\n\r\n            return mediaItem\r\n        } catch (err) {\r\n            console.error(\"Error in getMedia:\", err);\r\n            throw new Error(\"Failed to retrieve media.\");\r\n        }\r\n    }\r\n\r\n    private async generateImageThumbnailFast(\r\n        file: File,\r\n        maxSize = 200,\r\n        quality = 0.8\r\n    ): Promise<string> {\r\n        const imgBitmap = await createImageBitmap(file);\r\n    \r\n        let width = imgBitmap.width;\r\n        let height = imgBitmap.height;\r\n    \r\n        if (width > height) {\r\n            height = Math.round((height / width) * maxSize);\r\n            width = maxSize;\r\n        } else {\r\n            width = Math.round((width / height) * maxSize);\r\n            height = maxSize;\r\n        }\r\n    \r\n        if (\"OffscreenCanvas\" in window) {\r\n            const canvas = new OffscreenCanvas(width, height);\r\n            const ctx = canvas.getContext(\"2d\", { alpha: true });\r\n\r\n            if (ctx) {\r\n                ctx.clearRect(0, 0, width, height); \r\n                ctx.drawImage(imgBitmap, 0, 0, width, height);\r\n        \r\n                const blob = await canvas.convertToBlob({ type: \"image/webp\", quality });\r\n                return URL.createObjectURL(blob);\r\n            }\r\n\r\n            return \"\";\r\n        } else {\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    private async getImageDimensions(\r\n        path: string\r\n    ): Promise<{ width: number; height: number }> {\r\n        return new Promise((resolve) => {\r\n            const img = new Image();\r\n            img.onload = () =>\r\n                resolve({ width: img.width, height: img.height });\r\n            img.src = path;\r\n        });\r\n    }\r\n\r\n    private async getVideoDimensions(path: string): Promise<{ width: number; height: number }> {\r\n        return new Promise((resolve, reject) => {\r\n            const video = document.createElement(\"video\");\r\n            video.src =  path;\r\n    \r\n            video.onloadedmetadata = () => resolve({ width: video.videoWidth, height: video.videoHeight });\r\n            video.onerror = () => reject(\"Failed to load video\");\r\n        });\r\n    }\r\n\r\n    private async getDominantColor(path: string): Promise<string> {\r\n        return new Promise((resolve) => {\r\n            const img = new Image();\r\n            img.crossOrigin = \"anonymous\"; \r\n    \r\n            img.onload = () => {\r\n                let canvas: OffscreenCanvas | HTMLCanvasElement;\r\n                let ctx: OffscreenCanvasRenderingContext2D | CanvasRenderingContext2D | null;\r\n    \r\n                if (\"OffscreenCanvas\" in window) {\r\n                    canvas = new OffscreenCanvas(10, 10);\r\n                    ctx = canvas.getContext(\"2d\");\r\n                } else {\r\n                    canvas = document.createElement(\"canvas\");\r\n                    ctx = canvas.getContext(\"2d\");\r\n                }\r\n    \r\n                if (ctx) {\r\n                    canvas.width = 10;\r\n                    canvas.height = 10;\r\n                    \r\n                    ctx.drawImage(img, 0, 0, 10, 10);\r\n                    const pixelData = ctx.getImageData(0, 0, 10, 10).data;\r\n    \r\n                    let r = 0, g = 0, b = 0, count = 0;\r\n                    for (let i = 0; i < pixelData.length; i += 4) {\r\n                        r += pixelData[i];\r\n                        g += pixelData[i + 1];\r\n                        b += pixelData[i + 2];\r\n                        count++;\r\n                    }\r\n\r\n                    r = Math.round(r / count);\r\n                    g = Math.round(g / count);\r\n                    b = Math.round(b / count);\r\n    \r\n                    const hex = `#${r.toString(16).padStart(2, \"0\")}${g\r\n                        .toString(16)\r\n                        .padStart(2, \"0\")}${b\r\n                        .toString(16)\r\n                        .padStart(2, \"0\")}`;\r\n    \r\n                    resolve(hex);\r\n\r\n                } else {\r\n                    resolve(\"#000000\"); // fallback-color\r\n                }\r\n            };\r\n    \r\n            img.onerror = () => resolve(\"#000000\"); // catch error\r\n            img.src = path;\r\n        });\r\n    }   \r\n}\r\n"]}