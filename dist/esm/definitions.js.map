{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"AAqFA;;GAEG;AACH,MAAM,CAAN,IAAY,WAYX;AAZD,WAAY,WAAW;IACnB,sCAAsC;IACtC,0BAAW,CAAA;IAEX,mCAAmC;IACnC,oCAAqB,CAAA;IAErB,6BAA6B;IAC7B,0BAAW,CAAA;IAEX,8BAA8B;IAC9B,wCAAyB,CAAA;AAC7B,CAAC,EAZW,WAAW,KAAX,WAAW,QAYtB;AA+GD;;;GAGG;AACH,MAAM,CAAN,IAAY,YAqBX;AArBD,WAAY,YAAY;IACpB,mDAAmD;IACnD,4CAA4B,CAAA;IAE5B,uBAAuB;IACvB,qCAAqB,CAAA;IAErB,uCAAuC;IACvC,2BAAW,CAAA;IAEX,mBAAmB;IACnB,yCAAyB,CAAA;IAEzB,wCAAwC;IACxC,qCAAqB,CAAA;IAErB,0CAA0C;IAC1C,0CAA0B,CAAA;IAE1B,yBAAyB;IACzB,uCAAuB,CAAA;AAC3B,CAAC,EArBW,YAAY,KAAZ,YAAY,QAqBvB","sourcesContent":["export interface GalleryPlusPlugin {\r\n    /**\r\n      * Checks the current permissions for accessing media.\r\n      *\r\n      * @returns {Promise<{ status: string }>}  \r\n      *          A promise resolving to an object containing the permission status.\r\n      */\r\n    checkPermissions(): Promise<{ status: string }>;\r\n\r\n    /**\r\n     * Requests the necessary permissions to access media.\r\n     *\r\n     * @returns {Promise<{ status: string }>}  \r\n     *          A promise resolving to an object containing the updated permission status.\r\n     */\r\n    requestPermissions(): Promise<{ status: string }>;\r\n    /**\r\n     * Retrieves media items from the device gallery.\r\n     *\r\n     * @param {GetMediaListOptions} options - The options for retrieving media.\r\n     * @returns {Promise<{ media: MediaItem[] }>}\r\n     *          A promise resolving to an object containing a list of media items.\r\n     */\r\n    getMediaList(options: GetMediaListOptions): Promise<{ media: MediaItem[] }>;\r\n\r\n    /**\r\n     * Retrieves details of a specific media item by its ID.\r\n     * @returns {Promise<MediaItem>} A promise resolving to a media item object.\r\n     */\r\n    getMedia(options: GetMediaOptions): Promise<FullMediaItem>;\r\n}\r\n\r\nexport interface GetMediaListOptions {\r\n    /**\r\n     * The type of media to retrieve. Default is `\"all\"`.\r\n     *\r\n     * - `\"image\"`: Only images\r\n     * - `\"video\"`: Only videos\r\n     * - `\"all\"`: Both images and videos\r\n     *\r\n     * @default \"all\"\r\n     */\r\n    type?: 'image' | 'video' | 'all';\r\n\r\n    /**\r\n     * The maximum number of media items to return.\r\n     */\r\n    limit?: number;\r\n\r\n    /**\r\n     * The starting index for pagination.\r\n     */\r\n    startAt?: number;\r\n\r\n    /**\r\n     * The size of the thumbnail in pixels.\r\n     *\r\n     * Example: `200` for 200x200px.\r\n     */\r\n    thumbnailSize?: number;\r\n\r\n    /**\r\n     * Sort order of the media items.\r\n     *\r\n     * - `\"oldest\"`: Oldest first\r\n     * - `\"newest\"`: Newest first\r\n     *\r\n     * @default \"newest\"\r\n     */\r\n    sort?: 'oldest' | 'newest';\r\n\r\n    /**\r\n     * Whether to include additional details like width, height.\r\n     */\r\n    includeDetails?: boolean;\r\n\r\n    /**\r\n     * Whether to extract and return the dominant color of the image.\r\n     */\r\n    includeBaseColor?: boolean;\r\n\r\n    /** Filter applied to the media selection */\r\n    filter?: MediaFilter;\r\n}\r\n\r\n/**\r\n * Filters for querying media items from the gallery.\r\n */\r\nexport enum MediaFilter {\r\n    /** No filtering, returns all media */\r\n    All = \"all\",\r\n\r\n    /** Only return panoramic images */\r\n    Panorama = \"panorama\",\r\n\r\n    /** Only return HDR images */\r\n    HDR = \"hdr\",\r\n\r\n    /** Only return screenshots */\r\n    Screenshot = \"screenshot\"\r\n}\r\n\r\nexport interface GetMediaOptions {\r\n    /**\r\n     * The unique identifier of the media item.\r\n     */\r\n    id: string;\r\n\r\n    /**\r\n     * Whether to include additional metadata such as width, height, and file size.\r\n     * @default false\r\n     */\r\n    includeDetails?: boolean;\r\n\r\n    /**\r\n     * Whether to extract and return the dominant color of the image.\r\n     * @default false\r\n     */\r\n    includeBaseColor?: boolean;\r\n\r\n    /**\r\n     * Whether to generate a temporary path to access the media.\r\n     * Available on iOS, Android, and Web.\r\n     * \r\n     * - On **iOS & Android**, the file path is only available if enabled.\r\n     * - On **Web**, the browser automatically provides a temporary URL.\r\n     *\r\n     * @default false (iOS & Android), always available on Web\r\n     */\r\n    includePath?: boolean;\r\n}\r\n\r\n/**\r\n * An extended version of `MediaItem` returned by `getMedia`.\r\n */\r\nexport interface FullMediaItem extends MediaItem {\r\n    /**\r\n     * File path or accessible URI of the media item.\r\n     */\r\n    path?: string;\r\n}\r\n\r\nexport interface MediaItem {\r\n    /**\r\n     * Unique identifier of the media item.\r\n     */\r\n    id: string;\r\n\r\n    /**\r\n     * The type of media (image or video).\r\n     */\r\n    type: 'image' | 'video';\r\n\r\n    /**\r\n     * The Unix timestamp in milliseconds when the media was created.\r\n     */\r\n    createdAt: number;\r\n\r\n    /**\r\n     * Base64-encoded thumbnail image (only in `getMediaList`).\r\n     */\r\n    thumbnail?: string;\r\n\r\n    /**\r\n     * Dominant color of the image (requires `includeBaseColor`).\r\n     */\r\n    baseColor?: string;\r\n\r\n    /**\r\n     * Original file name of the media (only applicable for web platforms).\r\n     */\r\n    name?: string;\r\n\r\n    /**\r\n     * Width of the media in pixels (requires `includeDetails`).\r\n     */\r\n    width?: number;\r\n\r\n    /**\r\n     * Height of the media in pixels (requires `includeDetails`).\r\n     */\r\n    height?: number;\r\n\r\n    /**\r\n     * Size of the file in bytes.\r\n     */\r\n    fileSize?: number;\r\n\r\n    /**\r\n     * The MIME type of the media item (e.g., \"image/jpeg\", \"video/mp4\").\r\n     */\r\n    mimeType?: string;\r\n\r\n\r\n    /**\r\n     * Indicates whether the media item is marked as a favorite.\r\n     * (iOS-only)\r\n     */\r\n    isFavorite?: boolean;\r\n\r\n    /**\r\n     * Indicates whether the media item is hidden.\r\n     * (iOS-only)\r\n     */\r\n    isHidden?: boolean;\r\n\r\n    /** The subtype of the media, indicating special properties */\r\n    subtype?: MediaSubtype;\r\n\r\n}\r\n\r\n/**\r\n * Represents special subtypes of media items, such as motion photos,\r\n * panoramas, HDR images, or slow-motion videos.\r\n */\r\nexport enum MediaSubtype {\r\n    /** A Live Photo (iOS) or Motion Photo (Android) */\r\n    MotionPhoto = \"motion_photo\",\r\n\r\n    /** A panorama image */\r\n    Panorama = \"panorama\",\r\n\r\n    /** A high dynamic range (HDR) image */\r\n    HDR = \"hdr\",\r\n\r\n    /** A screenshot */\r\n    Screenshot = \"screenshot\",\r\n\r\n    /** A photo with depth effect (bokeh) */\r\n    Portrait = \"portrait\",\r\n\r\n    /** A high frame rate slow-motion video */\r\n    SlowMotion = \"slow_motion\",\r\n\r\n    /** A time-lapse video */\r\n    Timelapse = \"timelapse\"\r\n}"]}